// Mock data for local development
import { Tenant, User, UsageSummary, Plan, AuditLogEntry, ProvisioningTask, LifecycleEvent } from '@/types';

export const mockTenants: Tenant[] = [
  {
    tenantId: 't-acme-9f3a',
    tenantType: 'ORG',
    tenantName: 'acme',
    plan: 'pro',
    isolationModel: 'SiloInVpc',
    region: 'ap-northeast-2',
    domain: 'acme.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 10,
      'dcv.gpuClass': 'g4dn.xlarge',
      'session.maxDurationMin': 240,
      'storage.gb': 500,
      'egress.gbPerMonth': 200,
    },
    labels: { priority: 'gold', accountExec: 'mz-lee' },
    tags: { industry: 'media', vertical: 'entertainment' },
    contacts: [
      { email: 'admin@acme.com', type: 'ADMIN' },
      { email: 'billing@acme.com', type: 'BILLING' }
    ],
    status: 'READY',
    createdAt: '2025-01-15T09:30:00Z',
    updatedAt: '2025-01-20T14:22:00Z',
    orgProfile: { legalEntity: 'Acme Inc.', seats: 25 },
  },
  {
    tenantId: 't-startup-2b4c',
    tenantType: 'ORG',
    tenantName: 'startup',
    plan: 'starter',
    isolationModel: 'Pooled',
    region: 'ap-northeast-2',
    domain: 'startup.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 3,
      'dcv.gpuClass': 'none',
      'session.maxDurationMin': 120,
      'storage.gb': 100,
      'egress.gbPerMonth': 50,
    },
    labels: { priority: 'silver' },
    tags: { industry: 'tech', stage: 'series-a' },
    contacts: [{ email: 'cto@startup.com', type: 'ADMIN' }],
    status: 'PROVISIONING',
    createdAt: '2025-01-22T11:15:00Z',
    updatedAt: '2025-01-22T11:15:00Z',
    orgProfile: { legalEntity: 'Startup Corp.', seats: 5 },
  },
  {
    tenantId: 't-enterprise-8x9y',
    tenantType: 'ORG',
    tenantName: 'enterprise',
    plan: 'enterprise',
    isolationModel: 'SiloAccount',
    region: 'ap-northeast-2',
    domain: 'enterprise.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 50,
      'dcv.gpuClass': 'g4dn.4xlarge',
      'session.maxDurationMin': 480,
      'storage.gb': 2000,
      'egress.gbPerMonth': 1000,
    },
    labels: { priority: 'platinum', accountExec: 'sales-director' },
    tags: { industry: 'finance', compliance: 'sox' },
    contacts: [
      { email: 'it@enterprise.com', type: 'ADMIN' },
      { email: 'procurement@enterprise.com', type: 'BILLING' }
    ],
    status: 'READY',
    createdAt: '2025-01-10T08:00:00Z',
    updatedAt: '2025-01-21T16:45:00Z',
    orgProfile: { legalEntity: 'Enterprise Solutions Ltd.', seats: 100 },
  },
  {
    tenantId: 't-gamedev-5k9m',
    tenantType: 'ORG',
    tenantName: 'gamedev',
    plan: 'pro',
    isolationModel: 'SiloInVpc',
    region: 'us-west-2',
    domain: 'gamedev.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 15,
      'dcv.gpuClass': 'g4dn.2xlarge',
      'session.maxDurationMin': 360,
      'storage.gb': 1000,
      'egress.gbPerMonth': 300,
    },
    labels: { priority: 'gold' },
    tags: { industry: 'gaming', vertical: 'mobile' },
    contacts: [{ email: 'devops@gamedev.com', type: 'ADMIN' }],
    status: 'READY',
    createdAt: '2025-01-12T14:20:00Z',
    updatedAt: '2025-01-22T09:15:00Z',
    orgProfile: { legalEntity: 'GameDev Studios', seats: 40 },
  },
  {
    tenantId: 't-healthcare-7p3q',
    tenantType: 'ORG',
    tenantName: 'healthcare',
    plan: 'enterprise',
    isolationModel: 'SiloAccount',
    region: 'ap-northeast-2',
    domain: 'healthcare.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 30,
      'dcv.gpuClass': 'g4dn.2xlarge',
      'session.maxDurationMin': 480,
      'storage.gb': 1500,
      'egress.gbPerMonth': 500,
    },
    labels: { priority: 'platinum', compliance: 'hipaa' },
    tags: { industry: 'healthcare', vertical: 'radiology' },
    contacts: [{ email: 'admin@healthcare.com', type: 'ADMIN' }],
    status: 'READY',
    createdAt: '2025-01-08T10:45:00Z',
    updatedAt: '2025-01-20T15:30:00Z',
    orgProfile: { legalEntity: 'Healthcare Imaging Corp.', seats: 60 },
  },
  {
    tenantId: 't-individual-1a2b',
    tenantType: 'INDIVIDUAL',
    tenantName: 'johndoe',
    plan: 'trial',
    isolationModel: 'Pooled',
    region: 'ap-northeast-2',
    entitlements: {
      'dcv.maxSessions': 1,
      'dcv.gpuClass': 'none',
      'session.maxDurationMin': 60,
      'storage.gb': 10,
      'egress.gbPerMonth': 1,
    },
    labels: {},
    tags: {},
    contacts: [{ email: 'john.doe@email.com', type: 'ADMIN' }],
    status: 'SUSPENDED',
    createdAt: '2025-01-18T13:45:00Z',
    updatedAt: '2025-01-19T10:30:00Z',
  },
  {
    tenantId: 't-freelancer-4w8x',
    tenantType: 'INDIVIDUAL',
    tenantName: 'designer_jane',
    plan: 'starter',
    isolationModel: 'Pooled',
    region: 'us-east-1',
    entitlements: {
      'dcv.maxSessions': 2,
      'dcv.gpuClass': 'g4dn.xlarge',
      'session.maxDurationMin': 180,
      'storage.gb': 50,
      'egress.gbPerMonth': 25,
    },
    labels: { priority: 'bronze' },
    tags: { profession: 'designer', focus: 'ui-ux' },
    contacts: [{ email: 'jane.designer@freelance.com', type: 'ADMIN' }],
    status: 'READY',
    createdAt: '2025-01-20T16:30:00Z',
    updatedAt: '2025-01-21T11:20:00Z',
  },
  {
    tenantId: 't-research-9c2d',
    tenantType: 'ORG',
    tenantName: 'research-lab',
    plan: 'enterprise',
    isolationModel: 'SiloInVpc',
    region: 'us-east-1',
    domain: 'research.ediworks.com',
    entitlements: {
      'dcv.maxSessions': 25,
      'dcv.gpuClass': 'p3.2xlarge',
      'session.maxDurationMin': 720,
      'storage.gb': 3000,
      'egress.gbPerMonth': 800,
    },
    labels: { priority: 'platinum', type: 'academic' },
    tags: { industry: 'research', vertical: 'ai-ml' },
    contacts: [
      { email: 'admin@research.edu', type: 'ADMIN' },
      { email: 'finance@research.edu', type: 'BILLING' }
    ],
    status: 'READY',
    createdAt: '2025-01-05T09:00:00Z',
    updatedAt: '2025-01-23T14:45:00Z',
    orgProfile: { legalEntity: 'AI Research Institute', seats: 75 },
  },
  {
    tenantId: 't-testing-1z9y',
    tenantType: 'ORG',
    tenantName: 'beta-testing',
    plan: 'trial',
    isolationModel: 'Pooled',
    region: 'ap-northeast-2',
    entitlements: {
      'dcv.maxSessions': 2,
      'dcv.gpuClass': 'none',
      'session.maxDurationMin': 90,
      'storage.gb': 20,
      'egress.gbPerMonth': 5,
    },
    labels: { priority: 'bronze', type: 'beta-test' },
    tags: { status: 'testing', phase: 'beta' },
    contacts: [{ email: 'test@example.com', type: 'ADMIN' }],
    status: 'ERROR',
    createdAt: '2025-01-23T08:15:00Z',
    updatedAt: '2025-01-23T08:45:00Z',
    orgProfile: { legalEntity: 'Beta Testing Corp.', seats: 3 },
  },
];

// Mock users for different tenants
export const mockUsersByTenant: Record<string, User[]> = {
  't-acme-9f3a': [
    { userId: 'u-1', email: 'admin@acme.com', role: 'TENANT_ADMIN', status: 'ACTIVE' },
    { userId: 'u-2', email: 'designer@acme.com', role: 'MEMBER', status: 'ACTIVE' },
    { userId: 'u-3', email: 'developer@acme.com', role: 'MEMBER', status: 'ACTIVE' },
    { userId: 'u-4', email: 'newbie@acme.com', role: 'MEMBER', status: 'INVITED' },
    { userId: 'u-5', email: 'manager@acme.com', role: 'MEMBER', status: 'ACTIVE' },
  ],
  't-enterprise-8x9y': [
    { userId: 'u-e1', email: 'it@enterprise.com', role: 'TENANT_ADMIN', status: 'ACTIVE' },
    { userId: 'u-e2', email: 'finance@enterprise.com', role: 'BILLING_ADMIN', status: 'ACTIVE' },
    { userId: 'u-e3', email: 'engineer1@enterprise.com', role: 'MEMBER', status: 'ACTIVE' },
    { userId: 'u-e4', email: 'engineer2@enterprise.com', role: 'MEMBER', status: 'ACTIVE' },
    { userId: 'u-e5', email: 'contractor@enterprise.com', role: 'MEMBER', status: 'INVITED' },
  ],
  't-gamedev-5k9m': [
    { userId: 'u-g1', email: 'devops@gamedev.com', role: 'TENANT_ADMIN', status: 'ACTIVE' },
    { userId: 'u-g2', email: 'artist@gamedev.com', role: 'MEMBER', status: 'ACTIVE' },
    { userId: 'u-g3', email: 'programmer@gamedev.com', role: 'MEMBER', status: 'ACTIVE' },
  ],
  't-startup-2b4c': [
    { userId: 'u-s1', email: 'cto@startup.com', role: 'TENANT_ADMIN', status: 'ACTIVE' },
    { userId: 'u-s2', email: 'dev@startup.com', role: 'MEMBER', status: 'ACTIVE' },
  ],
};

// Default users for generic usage
export const mockUsers: User[] = mockUsersByTenant['t-acme-9f3a'];

export const mockUsageSummary: UsageSummary = {
  tenantId: 't-acme-9f3a',
  range: '7d',
  metrics: {
    'dcv.sessions.active': 3,
    'dcv.sessions.total': 42,
    'compute.hours': 57.3,
    'storage.gb': 180,
    'egress.gb': 28.4,
  },
  updatedAt: '2025-01-23T03:10:00Z',
};

export const mockPlans: Plan[] = [
  {
    planId: 'trial',
    displayName: 'Trial',
    defaults: {
      isolationModel: 'Pooled',
      entitlements: {
        'dcv.maxSessions': 1,
        'dcv.gpuClass': 'none',
        'session.maxDurationMin': 60,
        'storage.gb': 10,
        'egress.gbPerMonth': 1,
      },
    },
    billing: { model: 'free', base: 0, currency: 'USD' },
    featureFlags: [],
  },
  {
    planId: 'starter',
    displayName: 'Starter',
    defaults: {
      isolationModel: 'Pooled',
      entitlements: {
        'dcv.maxSessions': 3,
        'dcv.gpuClass': 'none',
        'session.maxDurationMin': 120,
        'storage.gb': 100,
        'egress.gbPerMonth': 50,
      },
    },
    billing: { model: 'fixed', base: 49, currency: 'USD' },
    featureFlags: ['BasicSupport'],
  },
  {
    planId: 'pro',
    displayName: 'Pro',
    defaults: {
      isolationModel: 'SiloInVpc',
      entitlements: {
        'dcv.maxSessions': 10,
        'dcv.gpuClass': 'g4dn.xlarge',
        'session.maxDurationMin': 240,
        'storage.gb': 500,
        'egress.gbPerMonth': 200,
      },
    },
    billing: { model: 'hybrid', base: 300, currency: 'USD' },
    featureFlags: ['BYOK', 'DedicatedSubnet'],
  },
  {
    planId: 'enterprise',
    displayName: 'Enterprise',
    defaults: {
      isolationModel: 'SiloAccount',
      entitlements: {
        'dcv.maxSessions': 50,
        'dcv.gpuClass': 'g4dn.4xlarge',
        'session.maxDurationMin': 480,
        'storage.gb': 2000,
        'egress.gbPerMonth': 1000,
      },
    },
    billing: { model: 'custom', base: 2000, currency: 'USD' },
    featureFlags: ['BYOK', 'DedicatedSubnet', 'WhiteGlove', 'CustomSLA'],
  },
];

export const mockAuditLog: AuditLogEntry[] = [
  {
    timestamp: '2025-01-23T14:35:22Z',
    actor: 'admin@ediworks.local',
    action: 'CREATE_TENANT',
    before: null,
    after: { tenantId: 't-testing-1z9y', tenantName: 'beta-testing', plan: 'trial' },
    requestId: 'req-create-123',
  },
  {
    timestamp: '2025-01-23T11:15:00Z',
    actor: 'admin@ediworks.local',
    action: 'PATCH_ENTITLEMENTS',
    before: { plan: 'pro', 'dcv.maxSessions': 10 },
    after: { plan: 'pro', 'dcv.maxSessions': 15 },
    requestId: 'req-entitle-456',
  },
  {
    timestamp: '2025-01-23T09:20:15Z',
    actor: 'admin@ediworks.local',
    action: 'INVITE_USER',
    before: null,
    after: { tenantId: 't-enterprise-8x9y', email: 'contractor@enterprise.com', role: 'MEMBER' },
    requestId: 'req-invite-789',
  },
  {
    timestamp: '2025-01-22T16:45:00Z',
    actor: 'reviewer@ediworks.local',
    action: 'GET_TENANT_DETAILS',
    before: null,
    after: { tenantId: 't-research-9c2d' },
    requestId: 'req-view-012',
  },
  {
    timestamp: '2025-01-22T15:30:00Z',
    actor: 'admin@ediworks.local',
    action: 'CREATE_TENANT',
    before: null,
    after: { tenantId: 't-startup-2b4c', tenantName: 'startup', plan: 'starter' },
    requestId: 'req-create-345',
  },
  {
    timestamp: '2025-01-22T14:22:00Z',
    actor: 'admin@ediworks.local',
    action: 'SUSPEND_TENANT',
    before: { status: 'READY' },
    after: { status: 'SUSPENDED' },
    requestId: 'req-suspend-678',
  },
  {
    timestamp: '2025-01-21T11:10:30Z',
    actor: 'admin@ediworks.local',
    action: 'CREATE_DOMAIN',
    before: null,
    after: { tenantId: 't-gamedev-5k9m', domain: 'gamedev.ediworks.com' },
    requestId: 'req-domain-901',
  },
  {
    timestamp: '2025-01-20T17:25:45Z',
    actor: 'admin@ediworks.local',
    action: 'UPDATE_SEATS',
    before: { quota: 20 },
    after: { quota: 25 },
    requestId: 'req-seats-234',
  },
  {
    timestamp: '2025-01-20T13:12:18Z',
    actor: 'admin@ediworks.local',
    action: 'CREATE_TENANT',
    before: null,
    after: { tenantId: 't-freelancer-4w8x', tenantName: 'designer_jane', plan: 'starter' },
    requestId: 'req-create-567',
  },
  {
    timestamp: '2025-01-19T10:30:00Z',
    actor: 'admin@ediworks.local',
    action: 'PATCH_ENTITLEMENTS',
    before: { plan: 'starter', 'dcv.maxSessions': 3 },
    after: { plan: 'pro', 'dcv.maxSessions': 10 },
    requestId: 'req-upgrade-890',
  },
];

export const mockProvisioningTasks: ProvisioningTask[] = [
  {
    taskId: 'tf-domain-01',
    name: 'IssueDomain',
    status: 'SUCCEEDED',
    durationSec: 38,
  },
  {
    taskId: 'tf-asg-02',
    name: 'CreateTenantASG',
    status: 'RUNNING',
  },
  {
    taskId: 'tf-vpc-03',
    name: 'CreateVPC',
    status: 'SUCCEEDED',
    durationSec: 125,
  },
];

export const mockLifecycleEvents: LifecycleEvent[] = [
  {
    eventId: 'e-1',
    type: 'TenantCreated',
    createdAt: '2025-01-22T11:15:00Z',
  },
  {
    eventId: 'e-2',
    type: 'DomainIssued',
    createdAt: '2025-01-22T11:18:00Z',
  },
  {
    eventId: 'e-3',
    type: 'ProvisioningStarted',
    createdAt: '2025-01-22T11:20:00Z',
  },
];

// Helper function to simulate API delay
export const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));