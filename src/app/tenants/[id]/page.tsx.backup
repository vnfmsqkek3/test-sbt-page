'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useParams } from 'next/navigation';
import Layout from '@/components/Layout';
import Loading from '@/components/Loading';
import { auth } from '@/lib/auth';
import { apiClient } from '@/lib/api';
import { AuthUser, Tenant, User, ProvisioningTask, LifecycleEvent, UsageSummary } from '@/types';
import { getPlanStyles, getPlanLabel } from '@/lib/planStyles';
import { 
  PlayIcon, 
  PauseIcon, 
  TrashIcon, 
  PencilIcon,
  UserPlusIcon,
  ChartBarIcon,
  DocumentTextIcon,
  GlobeAltIcon,
  CogIcon,
  ExclamationTriangleIcon,
  BuildingOffice2Icon,
  ArrowLeftIcon,
  ArrowUpRightIcon,
  ShieldCheckIcon,
  FireIcon,
  SparklesIcon,
  BeakerIcon,
  RocketLaunchIcon,
  StarIcon,
  BoltIcon,
  ClockIcon,
  CheckCircleIcon,
  ExclamationCircleIcon
} from '@heroicons/react/24/outline';

export default function TenantDetailPage() {
  const [user, setUser] = useState<AuthUser | null>(null);
  const [loading, setLoading] = useState(true);
  const [tenant, setTenant] = useState<Tenant | null>(null);
  const [users, setUsers] = useState<User[]>([]);
  const [userCounts, setUserCounts] = useState({ active: 0, invited: 0 });
  const [tasks, setTasks] = useState<ProvisioningTask[]>([]);
  const [events, setEvents] = useState<LifecycleEvent[]>([]);
  const [usage, setUsage] = useState<UsageSummary | null>(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [actionLoading, setActionLoading] = useState('');
  
  const router = useRouter();
  const params = useParams();
  const tenantId = params.id as string;

  useEffect(() => {
    const initializeAuth = async () => {
      if (!auth.isAuthenticated()) {
        router.push('/login');
        return;
      }

      const currentUser = auth.getUser();
      setUser(currentUser);

      if (currentUser && auth.hasPermission('read')) {
        try {
          // Load tenant details
          const tenantData = await apiClient.getTenant(tenantId);
          setTenant(tenantData);

          // Load related data in parallel
          const [usersData, tasksData, eventsData, usageData] = await Promise.all([
            apiClient.getTenantUsers(tenantId),
            apiClient.getProvisioningTasks(tenantId),
            apiClient.getTenantEvents(tenantId),
            apiClient.getUsage({ tenantId, range: '7d' }),
          ]);

          setUsers(usersData.items);
          setUserCounts(usersData.counts);
          setTasks(tasksData.items);
          setEvents(eventsData.items);
          setUsage(usageData);
        } catch (error) {
          console.error('Failed to load tenant details:', error);
        }
      }
      
      setLoading(false);
    };

    if (tenantId) {
      initializeAuth();
    }
  }, [router, tenantId]);

  const handleAction = async (action: string) => {
    if (!tenant || !auth.hasPermission('write')) return;
    
    setActionLoading(action);
    try {
      switch (action) {
        case 'suspend':
          await apiClient.suspendTenant(tenantId, 'Manual suspension');
          setTenant({ ...tenant, status: 'SUSPENDED' });
          break;
        case 'resume':
          await apiClient.resumeTenant(tenantId);
          setTenant({ ...tenant, status: 'READY' });
          break;
        case 'delete':
          if (confirm('정말로 이 테넌트를 삭제하시겠습니까?')) {
            await apiClient.deleteTenant(tenantId);
            router.push('/tenants');
            return;
          }
          break;
      }
    } catch (error) {
      console.error(`Failed to ${action} tenant:`, error);
    } finally {
      setActionLoading('');
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <Loading text="테넌트 정보를 로드하는 중..." />
      </div>
    );
  }

  if (!user || !tenant) {
    return null;
  }

  const planStyles = getPlanStyles(tenant.plan);
  const canWrite = auth.hasPermission('write');

  const getPlanIcon = (plan: string) => {
    switch (plan.toLowerCase()) {
      case 'trial':
        return BeakerIcon;
      case 'starter':
        return RocketLaunchIcon;
      case 'pro':
        return StarIcon;
      case 'enterprise':
        return FireIcon;
      default:
        return BuildingOffice2Icon;
    }
  };

  const getPlanFeatures = (plan: string) => {
    switch (plan.toLowerCase()) {
      case 'trial':
        return ['기본 기능', '제한된 리소스', '커뮤니티 지원'];
      case 'starter':
        return ['확장된 기능', '기본 리소스', '이메일 지원'];
      case 'pro':
        return ['전체 기능', '우선순위 지원', '고급 분석'];
      case 'enterprise':
        return ['무제한 기능', '24/7 지원', '전용 매니저', '사용자 정의'];
      default:
        return ['기본 기능'];
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'READY':
        return CheckCircleIcon;
      case 'PROVISIONING':
        return ClockIcon;
      case 'SUSPENDED':
        return ExclamationCircleIcon;
      default:
        return ExclamationTriangleIcon;
    }
  };

  const tabs = [
    { id: 'overview', name: '개요', icon: DocumentTextIcon },
    { id: 'users', name: '사용자', icon: UserPlusIcon },
    { id: 'usage', name: '사용량', icon: ChartBarIcon },
    { id: 'tasks', name: '프로비저닝', icon: CogIcon },
    { id: 'events', name: '이벤트', icon: DocumentTextIcon },
  ];

  return (
    <Layout title="테넌트 상세" user={user}>
      <div className="min-h-screen flex">
        {/* Left Column - Main Content */}
        <div className="flex-1 p-6 space-y-6 overflow-y-auto">
          {/* 네비게이션 헤더 */}
          <div className="flex items-center justify-between">
            <button
              onClick={() => router.push('/tenants')}
              className="inline-flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-sm border border-gray-300 rounded-xl text-sm font-medium text-gray-700 hover:bg-gray-50 transition-all duration-200 shadow-sm hover:shadow-md"
            >
              <ArrowLeftIcon className="h-4 w-4" />
              테넌트 목록으로 돌아가기
            </button>
          </div>

        {/* Enhanced Tenant Card */}
        <div className={`${planStyles.bg} backdrop-blur-xl border ${planStyles.border} rounded-3xl shadow-2xl ${planStyles.shadow} hover:shadow-3xl transition-all duration-500 overflow-hidden group`}>
          <div className="relative">
            {/* Animated Background Pattern */}
            <div className={`absolute inset-0 bg-gradient-to-br ${planStyles.gradient} opacity-30`}>
              <div className="absolute inset-0 bg-gradient-to-t from-transparent via-white/5 to-white/10"></div>
            </div>
            
            {/* Floating Elements */}
            <div className="absolute top-4 right-4 opacity-20 group-hover:opacity-30 transition-opacity duration-500">
              <SparklesIcon className="w-8 h-8 text-white animate-pulse" />
            </div>
            
            <div className="relative p-6">
              {/* Main Content Area - Vertical Layout */}
              <div className="space-y-6">
                {/* Header Section */}
                <div className="text-center">
                  {/* Enhanced Plan Icon */}
                  <div className="relative inline-block mb-4">
                    <div className={`w-20 h-20 ${planStyles.bg} rounded-3xl flex items-center justify-center border-3 ${planStyles.border} shadow-xl transform group-hover:scale-105 transition-transform duration-300`}>
                      {React.createElement(getPlanIcon(tenant.plan), { 
                        className: `w-8 h-8 ${planStyles.text} transform group-hover:rotate-12 transition-transform duration-300` 
                      })}
                    </div>
                    {/* Plan Badge */}
                    <div className={`absolute -top-2 -right-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-bold border-2 border-white ${planStyles.badge} shadow-lg animate-bounce`}>
                      {getPlanLabel(tenant.plan).slice(0, 3).toUpperCase()}
                    </div>
                  </div>

                  {/* Title Section */}
                  <div className="space-y-3">
                    <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900 bg-clip-text text-transparent">
                      {tenant.tenantName}
                    </h1>
                    
                    {/* Enhanced Status Badge */}
                    <div className={`inline-flex items-center px-4 py-2 rounded-xl text-sm font-bold border-2 backdrop-blur-sm shadow-lg transform hover:scale-105 transition-all duration-200 ${
                      tenant.status === 'READY' ? 'bg-gradient-to-r from-emerald-100 to-green-100 text-emerald-800 border-emerald-400 shadow-emerald-200/50' :
                      tenant.status === 'PROVISIONING' ? 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800 border-yellow-400 shadow-yellow-200/50' :
                      tenant.status === 'SUSPENDED' ? 'bg-gradient-to-r from-red-100 to-pink-100 text-red-800 border-red-400 shadow-red-200/50' :
                      'bg-gradient-to-r from-gray-100 to-slate-100 text-gray-800 border-gray-400 shadow-gray-200/50'
                    }`}>
                      {React.createElement(getStatusIcon(tenant.status), { 
                        className: `w-4 h-4 mr-2 ${tenant.status === 'PROVISIONING' ? 'animate-spin' : 'animate-pulse'}` 
                      })}
                      {tenant.status === 'READY' ? '활성' :
                       tenant.status === 'PROVISIONING' ? '프로비저닝' :
                       tenant.status === 'SUSPENDED' ? '일시중지' :
                       tenant.status === 'DELETING' ? '삭제중' : '오류'}
                    </div>
                  </div>
                </div>
                
                {/* Info Grid - Vertical Layout */}
                <div className="grid grid-cols-1 gap-4">
                      <div className="bg-white/40 backdrop-blur-sm rounded-xl p-4 border border-white/30 shadow-lg hover:shadow-xl transition-all duration-200">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-blue-400 to-indigo-600 rounded-lg flex items-center justify-center shadow-lg">
                            <DocumentTextIcon className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <div className="text-xs font-medium text-gray-500">Tenant ID</div>
                            <div className="font-mono font-bold text-gray-900 text-sm">{tenant.tenantId}</div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-white/40 backdrop-blur-sm rounded-xl p-4 border border-white/30 shadow-lg hover:shadow-xl transition-all duration-200">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-purple-400 to-violet-600 rounded-lg flex items-center justify-center shadow-lg">
                            <BuildingOffice2Icon className="w-5 h-5 text-white" />
                          </div>
                          <div>
                            <div className="text-xs font-medium text-gray-500">조직 타입</div>
                            <div className="font-bold text-gray-900 text-sm">{tenant.tenantType === 'ORG' ? '기업' : '개인'}</div>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-white/40 backdrop-blur-sm rounded-xl p-4 border border-white/30 shadow-lg hover:shadow-xl transition-all duration-200">
                        <div className="flex items-center gap-3">
                          <div className={`w-10 h-10 bg-gradient-to-br ${planStyles.gradient} rounded-lg flex items-center justify-center shadow-lg`}>
                            {React.createElement(getPlanIcon(tenant.plan), { className: "w-5 h-5 text-white" })}
                          </div>
                          <div>
                            <div className="text-xs font-medium text-gray-500">플랜</div>
                            <div className="font-bold text-gray-900 text-sm">{getPlanLabel(tenant.plan)}</div>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Domain & Features */}
                    <div className="space-y-4">
                      {tenant.domain && (
                        <div className="flex items-center gap-3 p-3 bg-white/30 backdrop-blur-sm rounded-lg border border-white/40">
                          <div className="w-8 h-8 bg-gradient-to-br from-teal-400 to-cyan-600 rounded-lg flex items-center justify-center">
                            <GlobeAltIcon className="h-4 w-4 text-white" />
                          </div>
                          <span className="font-semibold text-gray-800">{tenant.domain}</span>
                        </div>
                      )}
                      
                      {/* Plan Features */}
                      <div className="flex flex-wrap gap-2">
                        {getPlanFeatures(tenant.plan).map((feature, index) => (
                          <span
                            key={index}
                            className="inline-flex items-center gap-1 px-3 py-1 bg-white/50 backdrop-blur-sm rounded-full text-xs font-medium text-gray-700 border border-white/60 shadow-sm"
                          >
                            <ShieldCheckIcon className="w-3 h-3" />
                            {feature}
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>

                {canWrite && (
                  <div className="flex flex-col sm:flex-row gap-3">
                    {tenant.status === 'READY' && (
                      <button
                        onClick={() => handleAction('suspend')}
                        disabled={actionLoading === 'suspend'}
                        className="inline-flex items-center justify-center px-4 py-2.5 bg-white/80 backdrop-blur-sm border border-orange-300 rounded-xl text-sm font-medium text-orange-700 hover:bg-orange-50 hover:border-orange-400 transition-all duration-200 shadow-sm hover:shadow-md disabled:opacity-50"
                      >
                        <PauseIcon className="h-4 w-4 mr-2" />
                        일시중지
                      </button>
                    )}
                    {tenant.status === 'SUSPENDED' && (
                      <button
                        onClick={() => handleAction('resume')}
                        disabled={actionLoading === 'resume'}
                        className="inline-flex items-center justify-center px-4 py-2.5 bg-white/80 backdrop-blur-sm border border-emerald-300 rounded-xl text-sm font-medium text-emerald-700 hover:bg-emerald-50 hover:border-emerald-400 transition-all duration-200 shadow-sm hover:shadow-md disabled:opacity-50"
                      >
                        <PlayIcon className="h-4 w-4 mr-2" />
                        재개
                      </button>
                    )}
                    <button
                      onClick={() => router.push(`/tenants/${tenantId}/edit`)}
                      className="inline-flex items-center justify-center px-4 py-2.5 bg-white/80 backdrop-blur-sm border border-blue-300 rounded-xl text-sm font-medium text-blue-700 hover:bg-blue-50 hover:border-blue-400 transition-all duration-200 shadow-sm hover:shadow-md"
                    >
                      <PencilIcon className="h-4 w-4 mr-2" />
                      편집
                    </button>
                    <button
                      onClick={() => handleAction('delete')}
                      disabled={actionLoading === 'delete'}
                      className="inline-flex items-center justify-center px-4 py-2.5 bg-white/80 backdrop-blur-sm border border-red-300 rounded-xl text-sm font-medium text-red-700 hover:bg-red-50 hover:border-red-400 transition-all duration-200 shadow-sm hover:shadow-md disabled:opacity-50"
                    >
                      <TrashIcon className="h-4 w-4 mr-2" />
                      삭제
                    </button>
                  </div>
                )}
              </div>

              {/* Enhanced Statistics Section */}
              <div className="mt-6 pt-6 border-t border-white/30">
                <div className="grid grid-cols-2 gap-4">
                  <div className="bg-white/80 backdrop-blur-xl rounded-xl p-4 border border-gray-200/50 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300">
                    <div className="text-center">
                      <div className="w-10 h-10 bg-gray-600 rounded-lg flex items-center justify-center shadow-lg mx-auto mb-2">
                        <UserPlusIcon className="w-5 h-5 text-white" />
                      </div>
                      <div className="text-2xl font-bold text-gray-900">{userCounts.active + userCounts.invited}</div>
                      <div className="text-xs font-semibold text-gray-800 mb-1">총 사용자</div>
                      <div className="text-xs text-gray-600">활성 {userCounts.active} • 초대 {userCounts.invited}</div>
                      <div className="mt-2 bg-gray-200/50 rounded-full h-1">
                        <div 
                          className="bg-gradient-to-r from-gray-500 to-gray-700 h-1 rounded-full transition-all duration-1000"
                          style={{ width: `${Math.min(((userCounts.active + userCounts.invited) / tenant.entitlements['dcv.maxSessions']) * 100, 100)}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>

                  <div className="bg-white/80 backdrop-blur-xl rounded-2xl p-5 border border-gray-200/50 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300">
                    <div className="flex items-center justify-between mb-3">
                      <div className="w-12 h-12 bg-gray-600 rounded-xl flex items-center justify-center shadow-lg">
                        <CogIcon className="w-6 h-6 text-white" />
                      </div>
                      <div className="text-3xl font-bold text-gray-900">{tasks.filter(t => t.status === 'RUNNING').length}</div>
                    </div>
                    <div className="space-y-1">
                      <div className="text-sm font-semibold text-gray-800">실행중 태스크</div>
                      <div className="text-xs text-gray-600">전체 {tasks.length}개 중 실행중</div>
                    </div>
                    <div className="flex items-center mt-3 gap-1">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className={`w-2 h-2 rounded-full ${i < tasks.filter(t => t.status === 'RUNNING').length ? 'bg-gray-500 animate-pulse' : 'bg-gray-300'}`}></div>
                      ))}
                    </div>
                  </div>

                  <div className="bg-white/80 backdrop-blur-xl rounded-xl p-4 border border-gray-200/50 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300">
                    <div className="text-center">
                      <div className="w-10 h-10 bg-gray-600 rounded-lg flex items-center justify-center shadow-lg mx-auto mb-2">
                        <BoltIcon className="w-5 h-5 text-white" />
                      </div>
                      <div className="text-2xl font-bold text-gray-900">{usage?.metrics['dcv.sessions.active'] || 0}</div>
                      <div className="text-xs font-semibold text-gray-800 mb-1">활성 세션</div>
                      <div className="text-xs text-gray-600">현재 실행중</div>
                      <div className="mt-2 flex items-center justify-center gap-1">
                        <div className="w-1.5 h-1.5 bg-gray-500 rounded-full animate-ping"></div>
                        <div className="text-xs text-gray-600">실시간</div>
                      </div>
                    </div>
                  </div>

                  <div className="bg-white/80 backdrop-blur-xl rounded-xl p-4 border border-gray-200/50 shadow-lg hover:shadow-xl transform hover:-translate-y-1 transition-all duration-300">
                    <div className="text-center">
                      <div className="w-10 h-10 bg-gray-600 rounded-lg flex items-center justify-center shadow-lg mx-auto mb-2">
                        <ChartBarIcon className="w-5 h-5 text-white" />
                      </div>
                      <div className="text-2xl font-bold text-gray-900">{tenant.entitlements['dcv.maxSessions']}</div>
                      <div className="text-xs font-semibold text-gray-800 mb-1">최대 세션</div>
                      <div className="text-xs text-gray-600">허용된 동시 세션</div>
                      <div className="mt-2 bg-gray-200/50 rounded-full h-1">
                        <div 
                          className="bg-gradient-to-r from-gray-500 to-gray-700 h-1 rounded-full transition-all duration-1000"
                          style={{ width: `${((usage?.metrics['dcv.sessions.active'] || 0) / tenant.entitlements['dcv.maxSessions']) * 100}%` }}
                        ></div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Additional Metrics - Vertical Layout */}
                <div className="grid grid-cols-1 gap-3 mt-4">
                  <div className="bg-white/50 backdrop-blur-sm rounded-xl p-4 border border-white/60 shadow-sm">
                    <div className="flex items-center gap-3">
                      <ClockIcon className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="text-xs text-gray-500">생성일</div>
                        <div className="font-semibold text-gray-800">{new Date(tenant.createdAt).toLocaleDateString('ko-KR')}</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white/50 backdrop-blur-sm rounded-xl p-4 border border-white/60 shadow-sm">
                    <div className="flex items-center gap-3">
                      <GlobeAltIcon className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="text-xs text-gray-500">리전</div>
                        <div className="font-semibold text-gray-800">{tenant.region}</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-white/50 backdrop-blur-sm rounded-xl p-4 border border-white/60 shadow-sm">
                    <div className="flex items-center gap-3">
                      <ShieldCheckIcon className="w-5 h-5 text-gray-500" />
                      <div>
                        <div className="text-xs text-gray-500">격리 모델</div>
                        <div className="font-semibold text-gray-800">{tenant.isolationModel}</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Right Column - Tabs and Content */}
        <div className="w-1/2 p-6 space-y-6 overflow-y-auto border-l border-gray-200/50">
          {/* Enhanced Tab Navigation */}
          <div className="bg-gradient-to-r from-white/70 via-white/60 to-white/70 backdrop-blur-xl rounded-3xl border border-gray-200/50 p-3 shadow-lg">
            <nav className="flex justify-center space-x-2 overflow-x-auto scrollbar-hide">
              {tabs.map((tab, index) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`flex items-center gap-2 px-4 py-3 rounded-2xl font-semibold text-xs transition-all duration-300 whitespace-nowrap transform hover:scale-105 ${
                    activeTab === tab.id
                      ? 'bg-gradient-to-r from-blue-500 via-indigo-600 to-purple-600 text-white shadow-xl shadow-blue-500/30 scale-105'
                      : 'text-gray-600 hover:text-gray-900 hover:bg-white/70 hover:shadow-lg'
                  }`}
                  style={{ 
                    animationDelay: `${index * 100}ms`,
                    animation: 'fadeInUp 0.6s ease-out forwards' 
                  }}
                >
                  <div className={`p-1.5 rounded-lg ${
                    activeTab === tab.id 
                      ? 'bg-white/20 backdrop-blur-sm' 
                      : 'bg-gray-100/50'
                  }`}>
                    <tab.icon className="h-3 w-3" />
                  </div>
                  {tab.name}
                  {activeTab === tab.id && (
                    <div className="flex items-center gap-1">
                      <div className="w-1 h-1 bg-white rounded-full animate-pulse"></div>
                      <div className="w-1 h-1 bg-white rounded-full animate-pulse" style={{ animationDelay: '0.2s' }}></div>
                      <div className="w-1 h-1 bg-white rounded-full animate-pulse" style={{ animationDelay: '0.4s' }}></div>
                    </div>
                  )}
                </button>
              ))}
            </nav>
          </div>

          {/* Clean Tab Content */}
          {activeTab === 'overview' && (
            <div className="grid grid-cols-1 gap-6">
            {/* Basic Info Card - Compact */}
            <div className="bg-white/80 backdrop-blur-xl rounded-2xl border border-gray-200/50 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
              {/* Header */}
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-gray-600 rounded-xl flex items-center justify-center shadow-md">
                  <DocumentTextIcon className="h-5 w-5 text-white" />
                </div>
                <h3 className="text-lg font-bold text-gray-900">기본 정보</h3>
              </div>

              {/* Content - Compact */}
              <div className="space-y-3">
                <div className="bg-gray-50/70 rounded-xl p-3 border border-gray-200/60">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <ShieldCheckIcon className="w-4 h-4 text-gray-600" />
                      <span className="text-sm font-medium text-gray-600">격리 모델</span>
                    </div>
                    <span className="text-sm font-bold text-gray-900">{tenant.isolationModel}</span>
                  </div>
                </div>
                
                <div className="bg-gray-50/70 rounded-xl p-3 border border-gray-200/60">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <GlobeAltIcon className="w-4 h-4 text-gray-600" />
                      <span className="text-sm font-medium text-gray-600">리전</span>
                    </div>
                    <span className="text-sm font-bold text-gray-900">{tenant.region}</span>
                  </div>
                </div>
                
                <div className="bg-gray-50/70 rounded-xl p-3 border border-gray-200/60">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-2">
                      <ClockIcon className="w-4 h-4 text-gray-600" />
                      <span className="text-sm font-medium text-gray-600">생성일</span>
                    </div>
                    <span className="text-sm font-bold text-gray-900">
                      {new Date(tenant.createdAt).toLocaleDateString('ko-KR')}
                    </span>
                  </div>
                </div>
              </div>
              </div>
            </div>

            {/* Entitlements Card - Compact */}
            <div className="bg-white/80 backdrop-blur-xl rounded-2xl border border-gray-200/50 p-6 shadow-lg hover:shadow-xl transition-all duration-300">
              {/* Header */}
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-gray-600 rounded-xl flex items-center justify-center shadow-md">
                  <CogIcon className="h-5 w-5 text-white" />
                </div>
                <h3 className="text-lg font-bold text-gray-900">엔타이틀먼트</h3>
              </div>

              {/* Content - Compact */}
              <div className="space-y-2">
                {[
                  { label: '최대 세션', value: tenant.entitlements['dcv.maxSessions'], icon: ChartBarIcon },
                  { label: 'GPU 클래스', value: tenant.entitlements['dcv.gpuClass'], icon: CogIcon },
                  { label: '세션 최대 시간', value: `${tenant.entitlements['session.maxDurationMin']}분`, icon: ClockIcon },
                  { label: '스토리지', value: `${tenant.entitlements['storage.gb']}GB`, icon: DocumentTextIcon },
                  { label: '월 Egress', value: `${tenant.entitlements['egress.gbPerMonth']}GB`, icon: GlobeAltIcon }
                ].map((item, index) => (
                  <div key={index} className="bg-gray-50/70 rounded-xl p-3 border border-gray-200/60">
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-2">
                        <item.icon className="w-4 h-4 text-gray-600" />
                        <span className="text-sm font-medium text-gray-600">{item.label}</span>
                      </div>
                      <span className="text-sm font-bold text-gray-900">{item.value}</span>
                    </div>
                  </div>
                ))}
              </div>
              </div>
            </div>

            {/* Organization Info Card */}
            {tenant.orgProfile && (
              <div className="group bg-white/80 backdrop-blur-xl rounded-3xl border border-gray-200/50 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden relative">
                {/* Subtle Background Animation */}
                <div className="absolute inset-0 bg-gradient-to-r from-gray-50/50 to-gray-100/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                
                {/* Header */}
                <div className="relative z-10">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 bg-gradient-to-br from-gray-600 to-gray-800 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300">
                        <BuildingOffice2Icon className="h-6 w-6 text-white" />
                      </div>
                      <h3 className="text-xl font-bold text-gray-900">조직 정보</h3>
                    </div>
                    <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <StarIcon className="w-6 h-6 text-gray-400 animate-pulse" />
                    </div>
                  </div>

                  {/* Content */}
                  <div className="space-y-5">
                    <div className="bg-gray-50/70 backdrop-blur-sm rounded-2xl p-4 border border-gray-200/60 shadow-sm hover:shadow-md hover:bg-white/70 transition-all duration-200">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-gray-600 rounded-lg flex items-center justify-center">
                          <BuildingOffice2Icon className="w-4 h-4 text-white" />
                        </div>
                        <div>
                          <dt className="text-xs font-medium text-gray-500 uppercase tracking-wide">법인명</dt>
                          <dd className="text-lg font-bold text-gray-900">{tenant.orgProfile.legalEntity}</dd>
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50/70 backdrop-blur-sm rounded-2xl p-4 border border-gray-200/60 shadow-sm hover:shadow-md hover:bg-white/70 transition-all duration-200">
                      <div className="flex items-center gap-3">
                        <div className="w-8 h-8 bg-gray-600 rounded-lg flex items-center justify-center">
                          <UserPlusIcon className="w-4 h-4 text-white" />
                        </div>
                        <div>
                          <dt className="text-xs font-medium text-gray-500 uppercase tracking-wide">좌석 수</dt>
                          <dd className="text-lg font-bold text-gray-900">{tenant.orgProfile.seats}</dd>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Contacts Card */}
            <div className="group bg-white/80 backdrop-blur-xl rounded-3xl border border-gray-200/50 p-8 shadow-lg hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-2 overflow-hidden relative">
              {/* Subtle Background Animation */}
              <div className="absolute inset-0 bg-gradient-to-r from-gray-50/50 to-gray-100/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              
              {/* Header */}
              <div className="relative z-10">
                <div className="flex items-center justify-between mb-6">
                  <div className="flex items-center gap-4">
                    <div className="w-12 h-12 bg-gradient-to-br from-gray-600 to-gray-800 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300">
                      <UserPlusIcon className="h-6 w-6 text-white" />
                    </div>
                    <h3 className="text-xl font-bold text-gray-900">연락처</h3>
                  </div>
                  <div className="opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                    <SparklesIcon className="w-6 h-6 text-gray-400 animate-pulse" />
                  </div>
                </div>

                {/* Content */}
                <div className="space-y-4">
                  {tenant.contacts.map((contact, index) => (
                    <div key={index} className="bg-gray-50/70 backdrop-blur-sm rounded-2xl p-4 border border-gray-200/60 shadow-sm hover:shadow-md hover:bg-white/70 transition-all duration-200 transform hover:scale-105">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-8 h-8 bg-gray-600 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-sm">
                            {contact.email.slice(0, 1).toUpperCase()}
                          </div>
                          <div>
                            <div className="font-semibold text-gray-900">{contact.email}</div>
                            <div className="text-xs text-gray-500">{contact.type}</div>
                          </div>
                        </div>
                        <div className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-bold shadow-sm border ${
                          contact.type === 'PRIMARY' ? 'bg-blue-50 text-blue-700 border-blue-200' :
                          contact.type === 'BILLING' ? 'bg-green-50 text-green-700 border-green-200' :
                          'bg-gray-50 text-gray-700 border-gray-200'
                        }`}>
                          {contact.type === 'PRIMARY' ? '주 담당자' :
                           contact.type === 'BILLING' ? '청구 담당자' :
                           contact.type}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              </div>
            </div>
          )}

          {activeTab === 'users' && (
            <div className="bg-white/60 backdrop-blur-xl rounded-2xl border border-gray-200/50 shadow-sm">
            <div className="p-6 border-b border-gray-200/50">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <UserPlusIcon className="h-5 w-5 text-blue-500" />
                사용자 ({userCounts.active + userCounts.invited}명)
              </h3>
            </div>
            <div className="p-6 space-y-4">
              {users.map((user) => (
                <div key={user.userId} className="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-200/50 p-4 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                        {user.email.slice(0, 2).toUpperCase()}
                      </div>
                      <div>
                        <div className="font-medium text-gray-900">{user.email}</div>
                        <div className="text-sm text-gray-500">{user.role}</div>
                      </div>
                    </div>
                    <div className={`inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium ${
                      user.status === 'ACTIVE' ? 'bg-emerald-100 text-emerald-800' :
                      user.status === 'INVITED' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      <div className={`w-1.5 h-1.5 rounded-full mr-2 ${
                        user.status === 'ACTIVE' ? 'bg-emerald-500' :
                        user.status === 'INVITED' ? 'bg-yellow-500' :
                        'bg-gray-500'
                      }`}></div>
                      {user.status}
                    </div>
                  </div>
                </div>
              ))}
            </div>
            </div>
          )}

          {activeTab === 'usage' && usage && (
            <div className="bg-white/60 backdrop-blur-xl rounded-2xl border border-gray-200/50 shadow-sm">
            <div className="p-6 border-b border-gray-200/50">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <ChartBarIcon className="h-5 w-5 text-green-500" />
                사용량 통계 (최근 7일)
              </h3>
            </div>
            <div className="p-6">
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6">
                <div className="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-6 border border-blue-200">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium text-blue-600">활성 세션</div>
                    <div className="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                      <ChartBarIcon className="h-4 w-4 text-white" />
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-900">{usage.metrics['dcv.sessions.active']}</div>
                </div>
                <div className="bg-gradient-to-br from-emerald-50 to-green-100 rounded-2xl p-6 border border-emerald-200">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium text-emerald-600">총 세션</div>
                    <div className="w-8 h-8 bg-emerald-500 rounded-lg flex items-center justify-center">
                      <ChartBarIcon className="h-4 w-4 text-white" />
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-900">{usage.metrics['dcv.sessions.total']}</div>
                </div>
                <div className="bg-gradient-to-br from-purple-50 to-violet-100 rounded-2xl p-6 border border-purple-200">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium text-purple-600">컴퓨팅 시간</div>
                    <div className="w-8 h-8 bg-purple-500 rounded-lg flex items-center justify-center">
                      <ChartBarIcon className="h-4 w-4 text-white" />
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-900">{usage.metrics['compute.hours']}<span className="text-base text-gray-500 ml-1">h</span></div>
                </div>
                <div className="bg-gradient-to-br from-orange-50 to-amber-100 rounded-2xl p-6 border border-orange-200">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium text-orange-600">스토리지</div>
                    <div className="w-8 h-8 bg-orange-500 rounded-lg flex items-center justify-center">
                      <ChartBarIcon className="h-4 w-4 text-white" />
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-900">{usage.metrics['storage.gb']}<span className="text-base text-gray-500 ml-1">GB</span></div>
                </div>
                <div className="bg-gradient-to-br from-pink-50 to-rose-100 rounded-2xl p-6 border border-pink-200">
                  <div className="flex items-center justify-between mb-2">
                    <div className="text-sm font-medium text-pink-600">Egress</div>
                    <div className="w-8 h-8 bg-pink-500 rounded-lg flex items-center justify-center">
                      <ChartBarIcon className="h-4 w-4 text-white" />
                    </div>
                  </div>
                  <div className="text-3xl font-bold text-gray-900">{usage.metrics['egress.gb']}<span className="text-base text-gray-500 ml-1">GB</span></div>
                </div>
              </div>
            </div>
            </div>
          )}

          {activeTab === 'tasks' && (
            <div className="bg-white/60 backdrop-blur-xl rounded-2xl border border-gray-200/50 shadow-sm">
            <div className="p-6 border-b border-gray-200/50">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <CogIcon className="h-5 w-5 text-purple-500" />
                프로비저닝 태스크
              </h3>
            </div>
            <div className="p-6 space-y-4">
              {tasks.map((task) => (
                <div key={task.taskId} className="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-200/50 p-5 hover:shadow-md transition-all duration-200">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <h4 className="font-semibold text-gray-900">{task.name}</h4>
                        <div className={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium ${
                          task.status === 'RUNNING' ? 'bg-blue-100 text-blue-800' :
                          task.status === 'SUCCEEDED' ? 'bg-green-100 text-green-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          <div className={`w-1.5 h-1.5 rounded-full mr-2 ${
                            task.status === 'RUNNING' ? 'bg-blue-500 animate-pulse' :
                            task.status === 'SUCCEEDED' ? 'bg-green-500' :
                            'bg-red-500'
                          }`}></div>
                          {task.status}
                        </div>
                      </div>
                      <p className="text-xs text-gray-500 font-mono">Task ID: {task.taskId}</p>
                    </div>
                    {task.durationSec && (
                      <div className="text-right ml-4">
                        <div className="text-sm font-semibold text-gray-900">{task.durationSec}초</div>
                        <div className="text-xs text-gray-500">소요시간</div>
                      </div>
                    )}
                  </div>
                </div>
              ))}
            </div>
            </div>
          )}

          {activeTab === 'events' && (
            <div className="bg-white/60 backdrop-blur-xl rounded-2xl border border-gray-200/50 shadow-sm">
            <div className="p-6 border-b border-gray-200/50">
              <h3 className="text-lg font-semibold text-gray-900 flex items-center gap-2">
                <DocumentTextIcon className="h-5 w-5 text-indigo-500" />
                라이프사이클 이벤트
              </h3>
            </div>
            <div className="p-6 space-y-4">
              {events.map((event, index) => (
                <div key={event.eventId} className="relative">
                  {index !== events.length - 1 && (
                    <div className="absolute left-4 top-12 w-0.5 h-6 bg-gradient-to-b from-gray-300 to-transparent"></div>
                  )}
                  <div className="bg-white/80 backdrop-blur-sm rounded-xl border border-gray-200/50 p-5 hover:shadow-md transition-all duration-200">
                    <div className="flex items-start gap-4">
                      <div className="w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0 mt-1">
                        <DocumentTextIcon className="h-4 w-4 text-white" />
                      </div>
                      <div className="flex-1">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-gray-900">{event.type}</h4>
                          <div className="text-sm text-gray-500">
                            {new Date(event.createdAt).toLocaleString('ko-KR')}
                          </div>
                        </div>
                        <p className="text-xs text-gray-500 font-mono">{event.eventId}</p>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        </div>
      </div>
    </Layout>
  );
}